name: Stackable Build Pipeline

on:
  push:
    branches:
      - main
      - staging
      - trying
    tags:
      - "*"
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: '0'
  CARGO_PROFILE_DEV_DEBUG: '0'
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  RUST_LOG: "info"
  PRODUCT_NAME: zookeeper
  DEV_REPO_HELM_URL: https://repo.stackable.tech/repository/helm-dev
  TEST_REPO_HELM_URL: https://repo.stackable.tech/repository/helm-test
  STABLE_REPO_HELM_URL: https://repo.stackable.tech/repository/helm-stable

jobs:
  version:
    name: Build version and target repo
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ steps.select_repo.outputs.repo }}
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-python@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true
      - name: Update version if PR
        if: ${{ github.event_name == 'pull_request' }}
        run:  python/cargo_version.py -m pr${{ github.event.pull_request.number }}
      - id: select_repo
        run: echo "::set-output name=repo::world"
      - uses: jannekem/run-python-script-action@v1
        env:
          TRIGGER: $ {{ github.event_name }}
        with:
          script: |
            import os
            trigger = user = os.environ['TRIGGER']
            print(trigger)
            if trigger == 'pull_request':
              print("::set-output name=repo::testrepo")
            elif trigger == 'tag':
              print("::set-output name=repo::stablerepo")
            elif trigger == 'push':
              print("::set-output name=repo::devrepo")
            else:
              exit(-1)

#  run_cargodeny:
#    name: Run Cargo Deny
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        checks:
#          - advisories
#          - bans licenses sources
#
#    # Prevent sudden announcement of a new advisory from failing ci:
#    continue-on-error: ${{ matrix.checks == 'advisories' }}
#
#    steps:
#      - uses: actions/checkout@v2.4.
#      - uses: EmbarkStudios/cargo-deny-action@v1.2.6
#        with:
#          command: check ${{ matrix.checks }}
#
#  run_rustfmt:
#    name: Run Rustfmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.4.0
#      - uses: actions-rs/toolchain@v1.0.7
#        with:
#          profile: minimal
#          toolchain: stable
#          components: rustfmt
#          override: true
#      - uses: actions-rs/cargo@v1.0.3
#        with:
#          command: fmt
#          args: --all -- --check
#
#  run_clippy:
#    name: Run Clippy
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.4.0
#      - uses: actions-rs/toolchain@v1.0.7
#        with:
#          profile: minimal
#          toolchain: stable
#          components: clippy
#          override: true
#      - uses: Swatinem/rust-cache@v1.3.0
#        with:
#          key: clippy
#      # We need this due to: https://github.com/actions-rs/clippy-check/issues/2
#      - name: Check workflow permissions
#        id: check_permissions
#        uses: scherermichael-oss/action-has-permission@1.0.6
#        with:
#          required-permission: write
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Run clippy action to produce annotations
#        uses: actions-rs/clippy-check@v1.0.7
#        if: steps.check_permissions.outputs.has-permission
#        with:
#          args: --all-targets -- -D warnings
#          token: ${{ secrets.GITHUB_TOKEN }}
#      - name: Run clippy manually without annotations
#        if: ${{ !steps.check_permissions.outputs.has-permission }}
#        run: cargo clippy --all-targets -- -D warnings
#
#  run_rustdoc:
#      name: Run RustDoc
#      runs-on: ubuntu-latest
#      steps:
#        - uses: actions/checkout@v2.4.0
#        - uses: actions-rs/toolchain@v1.0.7
#          with:
#            profile: minimal
#            toolchain: stable
#            components: rustfmt
#            override: true
#        - uses: Swatinem/rust-cache@v1.3.0
#          with:
#            key: doc
#        - uses: actions-rs/cargo@v1.0.3
#          with:
#            command: doc
#            args: --document-private-items
#
#  run_tests:
#    name: Run Cargo Tests
#    needs:
#      - run_cargodeny
#      - run_clippy
#      - run_rustfmt
#      - run_rustdoc
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2.4.0
#      - uses: actions-rs/toolchain@v1.0.7
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#      - uses: Swatinem/rust-cache@v1.3.0
#        with:
#          key: test
#      - uses: actions-rs/cargo@v1.0.3
#        with:
#          command: test

  check_charts:
    name: Check if committed Helm & Kustomize Charts were up to date
#    needs:
#      - run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v2.0
        with:
          version: v3.6.2
      - name: Clean charts
        run: make chart-clean clean-manifests
      - name: Compile Helm
        run: make compile-chart
      - name: Generate manifests
        run: make generate-manifests
      - name: Check if committed charts were up to date
        run: git diff --exit-code
      - name: Git Diff showed uncommitted changes
        if: ${{ failure() }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Committed charts were not up to date, please regenerate and re-commit!')

  test_charts:
    name: Run Chart Tests
    needs:
      - check_charts
      - version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: placeholder
        run: |
          echo ${{ needs.version.outputs.version }}
          echo ${{ github.event_name }}
          echo ${{ github.event_path }}

  package_and_publish:
    name: Package Charts, Build Docker Image & Publish them
    needs:
      - test_charts
      - version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Package Chart
        run: mkdir -p target/helm && helm package --destination target/helm deploy/helm/${{ env.PRODUCT_NAME }}-operator
      - name: Build Docker image
        env:
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        if: env.NEXUS_PASSWORD != null
        run: echo
      - name: Publish Chart
        env:
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          REPO: ${{ needs.version.outputs.repository }}
        if: env.NEXUS_PASSWORD != null
        run: echo ${{ env.REPO }}

        #>-
        #  /usr/bin/curl
        #  --fail
        #  -u 'github:${{ secrets.NEXUS_PASSWORD }}'
        #  --upload-file "./$(find  target/helm/ -name '*.tgz')"
        #  "${{ env.REPO }}/"
